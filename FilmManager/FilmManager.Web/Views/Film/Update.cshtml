@model Film

<div class="card shadow border-0 mt-4">
    <div class="card-header bg-gradient bg-primary ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Update Film</h2>
            </div>
        </div>
    </div>

    <div class="card-body p-4">
        <form method="post" class="row">
            <div class="border p-3">
                <input id="filmId" value="@Model.Id" hidden />
                <div class="form-floating py-2 col-12">
                    <input asp-for="@Model.Name" class="form-control border-0 shadow" />
                    <label asp-for="@Model.Name" class="ms-2"></label>
                    <span asp-validation-for="@Model.Name" class="text-danger"></span>
                </div>
                <div class="form-floating py-2 col-12">
                    <input asp-for="@Model.Director" class="form-control border-0 shadow" />
                    <label asp-for="@Model.Director" class="ms-2"></label>
                    <span asp-validation-for="@Model.Director" class="text-danger"></span>
                </div>
                <div class="form-floating py-2 col-3">
                    <input asp-for="@Model.Release" class="form-control border-0 shadow" />
                    <label asp-for="@Model.Release" class="ms-2"></label>
                    <span asp-validation-for="@Model.Release" class="text-danger"></span>
                </div>
                <div class="row">
                    <div class="form-floating py-2 col-6">
                        <select id="availableCategories" class="form-select border-0 shadow">
                        </select>
                        <label for="availableCategories" class="ms-2">Add Category</label>
                    </div>
                    <div class="form-floating py-2 col-6">
                        <select id="selectedCategories" class="form-select border-0 shadow">
                        </select>
                        <label for="selectedCategories" class="ms-2">Remove Category</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-primary form-control">Save</button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a asp-controller="Film" asp-action="Index" class="btn btn-outline-secondary border form-control">
                            Back to List
                        </a>
                    </div>
                </div>

            </div>
        </form>

    </div>
</div>

@section Scripts {
    <script>
        class FilmCategoryTableManager {
            constructor(){
                this.availableCategories = [];
                this.selectedCategories = [];
                this.availableSelect = document.getElementById('availableCategories');
                this.selectedSelect = document.getElementById('selectedCategories'); this.fetchCategories();
            }

            async fetchCategories() {
                try {
                    const response = await fetch('https://localhost:7106/FilmCategories/GetCategories?filmId=@Model.Id');
                    const data = await response.json();
                    console.log(data);
                    this.availableCategories = data.availableCategories;
                    this.selectedCategories = data.selectedCategories;
                    this.renderCategorySelect();
                } catch(error){
                    console.error('Error fetching categorie', error);
                }
            }

            renderCategorySelect(){
                this.availableSelect.innerHTML = '';
                this.selectedSelect.innerHTML = '';

                const defaultAvailableOption = document.createElement('option');
                defaultAvailableOption.disabled = true;
                defaultAvailableOption.selected = true;
                defaultAvailableOption.text = "--Select Category";
                this.availableSelect.appendChild(defaultAvailableOption);

                this.availableCategories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.text = category.name;
                    this.availableSelect.appendChild(option);
                });

                const defaultSelectedOption = document.createElement('option');
                defaultSelectedOption.disabled = true;
                defaultSelectedOption.selected = true;
                defaultSelectedOption.text = "--Select Category";
                this.selectedSelect.appendChild(defaultSelectedOption);

                this.selectedCategories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.text = category.name;
                    this.selectedSelect.appendChild(option);
                });
            }

            async handleCategoryChange(selectElement, action){
                const filmId = document.getElementById('filmId').value;
                const categoryId = selectElement.value;
                console.log('filmId:',filmId);
                console.log('categoryId:', categoryId);
                try {
                    const response = await fetch(`https://localhost:7106/FilmCategories/${action}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ filmId, categoryId })
                    });
                    if (!response.ok) {
                        throw new Error(`Error ${action} connection`);
                    }

                    await this.fetchCategories();
                } catch (error) {
                    console.error('Error adding connection:', error);
                }
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const manager = new FilmCategoryTableManager();

            manager.availableSelect.addEventListener('change', function () {
                manager.handleCategoryChange(this, 'CreateConnection');
            });

            manager.selectedSelect.addEventListener('change', function () {
                manager.handleCategoryChange(this, 'RemoveConnection')
            });
        })
    </script>

    @{
             <partial name="_ValidationScriptsPartial" />
    }
}

